{
  "dataset_name": <enter the name of the dataset here>,
  "dataset_src_rel_to_home": <boolean : whether user specified paths are relative to home dir or cwd for the source data used by the script>,
  "dataset_src_subdir": <source dataset directory, either relative to home dir or cwd>,
  "scenes_src_subdir": <subdirectory within dataset_src_subdir holding raw aggregate scenes to be queried for glbs and/or configs>,
  "objects_src_subdir":  <subdirectory within dataset_src_subdir holding existing objets to be used as sources for scene instance naming. Ignored if "match_object_names" is False>,

  "dataset_dest_rel_to_home":<boolean : whether user specified paths are relative to home dir or cwd for the source data used by the script>,
  "dataset_dest_subdir": <destination dataset directory for writing output, either relative to home dir or cwd>,

  "dataset_glb_dest_subdir": <destination subdirectory, within dataset_dest_subdir, where to write extracted glbs outputs>,
  "stage_glb_dest_subdir" : <subdirectory within dataset_glb_dest_subdir to write extracted stage glb files>,
  "obj_glb_dest_subdir":  <subdirectory within dataset_glb_dest_subdir to write extracted object glb files>,

  "dataset_config_dest_subdir": <destination subdirectory, within dataset_dest_subdir, where to write config outputs, including scene dataset>,
  "scene_instance_dest_subdir" : <subdirectory within dataset_config_dest_subdir to write scene instance files>,
  "stage_config_dest_subdir" : <subdirectory within dataset_config_dest_subdir to write stage configuration files>,
  "obj_config_dest_subdir":  <subdirectory within dataset_config_dest_subdir to write object configuration files>,
  "light_config_dest_subdir": <subdirectory within dataset_config_dest_subdir to write lighting configuration files>,

  "stage_tag": <Case sensitive tag within scenegraph of src glb denoting subtree of nodes holding stage-based assets>,
  "objects_tag": <Case sensitive tag within scenegraph of src glb denoting subtree of nodes holding object assets>,
  "lighting_tag": <Case sensitive tag within scenegraph of src glb denoting subtree of nodes lighting info/transforms>,

  "build_dataset_config" : <boolean : whether or not to build the base scene dataset configuration json file. Defaults to true>,
  "build_scene_configs" : <boolean : whether or not to build the scene instance config json files. Defaults to true>,
  "build_stage_configs" : <boolean : whether or not to build the stage config json files. Defaults to true>,
  "build_object_configs" : <boolean : whether or not to build the object config json files. Defaults to true>,
  "build_lighting_configs" : <boolean : whether or not to build the lighting config json files. Defaults to true>,

  "build_stage_glbs" : <boolean : whether or not to build the extracted stage glbs. Defaults to true>,
  "build_object_glbs" : <boolean : whether or not to build the extracted object glbs. Defaults to true>,

  "save_object_instances" : <boolean : if false, do not save any object instance data> within the scene instance configs being written,

  "objects_all_static" : <boolean : whether or not all objects should be set to be static in scene instance config.
                          Defaults to false. Ignored if not building scene instance configs.>,
  "obj_created_static": [
    <list of node name substrings of constructs we wish to create as objects but that should be specified as static>
  ],
  "obj_created_dynamic": [<list of node name substrings of constructs we wish to create as objects and enforce dynamic behavior (to override static default)],
  "obj_translation_origin" : <string : either "asset_local" or "com", case insensitive, to use as the origin for translations for the objects in the scene>,
  "obj_recurse_subnodes" : <bool : whether to recurse scene graph to leaf for object meshes>

  "export_glbs_as_gltf" : <boolean : whether or not to export and save the source scene glbs as gltfs>
  "gltf_export_subdir" : <subdirectory, relative to dataset_config_dest_dir, to save gltf exported scenes, converted from glbs, if functionality is enabled>
  "save_scenegraph_hierarchy" : <boolean : whether or not we wish to save a json file holding the hierarchy of the scene graph of each scene">
  "scenegraph_diagnostics_subdir" : <subdirectory, relative to dataset_config_dest_dir, where to save output from scene hieararchy diagnostics>

  "stage_include_obj_substr": [
    <list of node name substrings of constructs found in "objects_tag" subtree that should be added to stage>
  ],
  "stage_translation_origin" : <string : either "asset_local" or "com", case insensitive, to use as the origin for translations for the stage>,
  "match_object_names": <boolean : whether to match object name refs in object config synth to objects found in obj_glb_dest_subdir.
                            Used when synthesizing scene instances for scenes with existing object glb files>,
  "obj_override_names": [
    <list of node name substrings of constructs found in "stage_tag" subtree that should be added to objects and
    not included in stage.  This will override entries swept up by substr search in 'stage_include_obj_substr'.  For example, if 'wall'
    is specified in stage_include_obj_substr, then you can override this option for 'wall_cabinet' by putting that substring here. >
  ],
  "obj_exclude_names": [
    <list of node name substrings of constructs found in scene graph that we do not want to create either as
    objects or components of the stage.  This will override entries swept up by substr search in both 'obj_override_names'
    and 'stage_include_obj_substr'.  So if you specify 'wall_cabinet_dummy' here, it will not be considered a stage component or an object component.>
  ],

  "stage_instance_file_tag": <stage names to use for stage instance refs in scene instance files. Search for the keys within scene name, and use the values as the stage to ref>,
  "default_lighting_tag":<tag to insert in every scene instance attributes to reference the default lighting>
  "apply_object_transform":<boolean : if provided, apply a transformation to the object's transformation before calculating translation and rotation>,

  "save_articulated_object_instances" : <whether or not to save articulated object instances in scene instance configs>,

  "ao_scene_mapping_obj_names": {
    <map of URDF model names (as key) to object node names in scene glb (as value) to map objects/locations to AOs.  These should be
    excluded from regular object extraction, to prevent double-dipping.  If not wishing to use scene_graph placement, or no scene-graph
    object corresponds to the desired URDF, use "" as value (for objects to be placed using absolute transforms in ao_instance_mappings.)>
  },
  "ao_instance_mappings": < Dict, keyed by scene tag, specifies file name tag look-up and scene instance articulated object mapping to use for each scene or range of scenes. Dict : >
        "<key> : <value>" : <key is scene tag, value is dictionary holding instancing information.  Each entry's value can hold the following
                            (absolute transforms, if provided, are applied before relative transforms, if provided): >
                "absolute_translation" : <absolute translation to use for object placement (when ignore placement info in scene graph)>,
                "translation_override_x": <overrides x value of absolute translation from scene graph>,
                "translation_override_y": <overrides y value of absolute translation from scene graph>,
                "translation_override_z": <overrides z value of absolute translation from scene graph>,
                "relative_translation" : <translation component of placement transform, added to scene_graph placement (or 0,0,0 if object is not found in map)>,
                "absolute_rotation" : <absolute rotational to use for object placement (ignores placement info in scene graph).  Is a quaternion of format w,x,y,z>,
                "local_relative_rotation" : <rotational component of placement transform (quaternion of format w,x,y,z), local, relative to scene_graph rotational component if present (applied after in quat multiplcation)>,
                "global_relative_rotation" : <rotational component of placement transform (quaternion of format w,x,y,z), global, relative to scene_graph rotational component if present (applied before in quat multiplcation)>,
                "uniform_scale" : <scalar value, scaling multiplier applied to all axes. defaults to 1.0>,

  "default_attributes": {
    <default attributes settings, used to initialize scene dataset configs before any stage or object-specific values are set>
    "stages": {
      <default values for stage configs and stage default section of scene dataset configs>
    },
    "objects": {
      <default values for object configs and object default section of scene dataset configs>
    },
    "scene_instances": {
      <default value for scene instance configs and scene default section of scene dataset configs>
    },
    "light_setups": {
      <default light setup values for scene dataset config>
    }
  }
}
